const PF_WASMVERSION="4.8.21";

var PeakFinder = PeakFinder || {};


function PFEvent(e){
this.name=e,
this.callbacks=[]
}

PeakFinder.PanoramaPanel = function(e=null)
{
	this.options=e,
	this.events={},
	this.settings = new PeakFinder.Settings(this),
	this.viewpoint = new PeakFinder.Viewpoint(this),
	this.astro = new PeakFinder.Astro(this),
	this.telescope = new PeakFinder.Telescope(this),
	this.canvasid = "canvas",
	this.baseurl="https://www.peakfinder.com",
	this.locale="en",
	this.disableinfosheets=!1,
	this.debug=!1,
	
	e &&( e.canvasid && ( this.canvasid=e.canvasid ),
	e.baseurl && (this.baseurl=e.baseurl),
	e.locale&&(this.locale=e.locale),
	e.bgcolor&&(this.bgcolor=e.bgcolor),
	e.theme&&(this.theme=e.theme),
	e.debug&&(this.debug=e.debug),
	e.disableinfosheets&&(this.disableinfosheets=e.disableinfosheets))},
	
	PeakFinder.PanoramaPanel.prototype.addEventListener=function(e,
	t){const n=this.events[e];
null!=n?n.registerCallback(t):console.log("event '"+e+"' doesn't exists")},
	PeakFinder.PanoramaPanel.prototype.registerCommandsCallback=function(e){this.commands=e},
	PeakFinder.PanoramaPanel.prototype.init=function(e){if(!PeakFinder.utils.caniuse())return void console.log("this browser does not support loading the PeakFinder.PanoramaPanel.");
console.log("env: 4.8.21");
let t=document.createElement("script");
t.setAttribute("src", "./pf-base.js"),
	t.setAttribute("async",
	""),
	t.setAttribute("defer",
	""),
	t.onload=()=>{var t=this,
	n={query:window.location.search,
	style:this.options.style,
	locale:this.locale,
	touch:PeakFinder.utils.isTouchDevice(),
	debug:this.options.debug,
	canvasid:t.canvasid,
	bgcolor:t.bgcolor,
	theme:t.theme,
	disableinfosheets:t.disableinfosheets},
	i=document.getElementById(t.canvasid);
window.pfModule({canvas:i,
	arguments:[JSON.stringify(n)],
	INITIAL_MEMORY:33554432,
	onRuntimeInitialized:function(){const e=document.getElementById(t.canvasid+"progress");
null!=e&&(e.style.display="none")},
	locateFile:function(e,
	n){
		return e.endsWith("4.8.21.wasm")||e.endsWith("4.8.21.wasm.map")||e.endsWith("4.8.21.data")||e.endsWith("4.8.21.worker.js")?t.baseurl+"/wasm/"+e:"../"+e},
	monitorRunDependencies:function(e){}}).then((n=>{t.wasm=n,
	t.registerEvent("viewpoint changed"),
	t.registerEvent("viewpointjourney finished"),
	t.registerEvent("sun changed"),
	t.registerEvent("moon changed"),
	t.registerEvent("poiinfo show"),
	window.pfHandleCommand=function(n){"initialized"===n&&e&&e(),
	n.startsWith("viewpoint changed")?t.dispatchEvent("viewpoint changed",
	JSON.parse(n.substring(18))):n.startsWith("viewpointjourney finished")?t.dispatchEvent("viewpointjourney finished",
	JSON.parse(n.substring(26))):n.startsWith("astro sun changed")?t.dispatchEvent("sun changed",
	JSON.parse(n.substring(18))):n.startsWith("astro moon changed")?t.dispatchEvent("moon changed",
	JSON.parse(n.substring(19))):n.startsWith("poiinfo show")&&(console.log(n.substring(13)),
	t.dispatchEvent("poiinfo show",
	JSON.parse(n.substring(13)))),
	t.commands&&t.commands(n)}}))},
	document.head.appendChild(t)},
	PeakFinder.PanoramaPanel.prototype.asyncinit=async function(){return new Promise(((e,
	t)=>{this.init((function(){e()}))}))},
	PeakFinder.PanoramaPanel.prototype.loadViewpoint=function(e,
	t,
	n=""){this.wasm.cwrap("startLoadingViewpoint",
	"",
	["number",
	"number",
	"string"])(e,
	t,
	n)},
	PeakFinder.PanoramaPanel.prototype.viewpointJourneyFinished=function(){return this.wasm.cwrap("viewpointJourneyFinished",
	"boolean",
	[])()},
	PeakFinder.PanoramaPanel.prototype.azimut=function(e,
	t){return void 0===e?this.wasm._getAzimut():(this.wasm._setAzimut(e,
	void 0===t?0:t),
	this.asleep(t))},
	PeakFinder.PanoramaPanel.prototype.altitude=function(e,
	t){return void 0===e?this.wasm._getAltitude():(this.wasm._setAltitude(e,
	void 0===t?0:t),
	this.asleep(t))},
	PeakFinder.PanoramaPanel.prototype.fieldofview=function(e,
	t){return void 0===e?this.wasm._getFieldOfView():(this.wasm._setFieldOfView(e,
	void 0===t?0:t),
	this.asleep(t))},
	PeakFinder.PanoramaPanel.prototype.elevationOffset=function(e,
	t){return void 0===e?this.wasm._getElevationOffset():(this.wasm._setElevationOffset(e,
	void 0===t?0:t),
	this.asleep(t))},
	PeakFinder.Settings=function(e){this.panel=e},
	PeakFinder.Settings.prototype.theme=function(e){return void 0===e?this.panel.wasm._getTheme():(this.panel.wasm._setTheme(e),
	this)},
	PeakFinder.Settings.prototype.distanceUnit=function(e){return void 0===e?this.panel.wasm._getDistanceUnit():(this.panel.wasm._setDistanceUnit(e),
	this)},
	PeakFinder.Settings.prototype.coordsFormat=function(e){return void 0===e?this.panel.wasm._getCoordsFormat():(this.panel.wasm._setCoordsFormat(e),
	this)},
	PeakFinder.Settings.prototype.projection=function(e){return void 0===e?this.panel.wasm._getProjection():(this.panel.wasm._setProjection(e),
	this)},
	PeakFinder.Settings.prototype.showSun=function(e){return void 0===e?this.panel.wasm._getShowSun():(this.panel.wasm._setShowSun(e),
	this)},
	PeakFinder.Settings.prototype.showMoon=function(e){return void 0===e?this.panel.wasm._getShowMoon():(this.panel.wasm._setShowMoon(e),
	this)},
	PeakFinder.Settings.prototype.showGrid=function(e){return void 0===e?this.panel.wasm._getShowGrid():(this.panel.wasm._setShowGrid(e),
	this)},
	PeakFinder.Settings.prototype.visibilityRange=function(e){return void 0===e?this.panel.wasm._getVisibilityRange():(this.panel.wasm._setVisibilityRange(e),
	this)},
	PeakFinder.Settings.prototype.minimalElevation=function(e){return void 0===e?this.panel.wasm._getMinimalElevation():(this.panel.wasm._setMinimalElevation(e),
	this)},
	PeakFinder.Viewpoint=function(e){this.panel=e},
	PeakFinder.Viewpoint.prototype.name=function(){return this.panel.wasm.cwrap("getViewpointName",
	"string")()},
	PeakFinder.Viewpoint.prototype.coordsDecimal=function(){return this.panel.wasm.cwrap("getViewpointCoordsDecimal",
	"string")()},
	PeakFinder.Viewpoint.prototype.coordsDegree=function(){return this.panel.wasm.cwrap("getViewpointCoordsDegree",
	"string")()},
	PeakFinder.Viewpoint.prototype.elevation=function(){return this.panel.wasm.cwrap("getViewpointElevation",
	"number")()},
	PeakFinder.Astro=function(e){this.panel=e},
	PeakFinder.Astro.prototype.currentDateTime=function(e,
	t,
	n,
	i,
	s){return this.panel.wasm.cwrap("setAstroDateTime",
	"",
	["number",
	"number",
	"number",
	"number",
	"number"])(e,
	t,
	n,
	i,
	s)},
	PeakFinder.Astro.prototype.currentDateTimeNow=function(){return this.panel.wasm.cwrap("setAstroDateTime",
	"")()},
	PeakFinder.Astro.prototype.sun=function(){return JSON.parse(this.panel.wasm.cwrap("getAstroSunJson",
	"string")())},
	PeakFinder.Astro.prototype.sunTimes=function(){return this.panel.wasm.cwrap("getAstroSunTimes",
	"string")()},
	PeakFinder.Astro.prototype.moon=function(){return JSON.parse(this.panel.wasm.cwrap("getAstroMoonJson",
	"string")())},
	PeakFinder.Astro.prototype.moonTimes=function(){return this.panel.wasm.cwrap("getAstroMoonTimes",
	"string")()},
	PeakFinder.Telescope=function(e){this.panel=e},
	PeakFinder.Telescope.prototype.show=function(){this.panel.wasm._showBinoculars()},
	PeakFinder.Telescope.prototype.hide=function(){this.panel.wasm._hideBinoculars()},
	PeakFinder.Telescope.prototype.centerAzimut=function(){return this.panel.wasm._getBinocularsCenterAzimut()},
	PeakFinder.Telescope.prototype.centerAltitude=function(){return this.panel.wasm._getBinocularsCenterAltitude()},
	PeakFinder.Telescope.prototype.centerDistance=function(){return this.panel.wasm._getBinocularsCenterDistance()},
	PeakFinder.Telescope.prototype.centerElevation=function(){return this.panel.wasm._getBinocularsCenterElevation()},
	PeakFinder.utils={caniuse:function(){try{if("object"==typeof WebAssembly&&"function"==typeof WebAssembly.instantiate){const e=new WebAssembly.Module(Uint8Array.of(0,
	97,
	115,
	109,
	1,
	0,
	0,
	0));
if(e instanceof WebAssembly.Module)return new WebAssembly.Instance(e)instanceof WebAssembly.Instance}}catch(e){}return!1},
	isTouchDevice:function(){return"ontouchstart"in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0},
	sleep:function(e){return new Promise((t=>{setTimeout(t,
	1e3*e)}))}},
	PeakFinder.PanoramaPanel.prototype.asleep=function(e){return e>0?new Promise((t=>{setTimeout(t,
	1e3*e)})):null},
	PFEvent.prototype.registerCallback=function(e){this.callbacks.push(e)},
	PeakFinder.PanoramaPanel.prototype.registerEvent=function(e){var t=new PFEvent(e);
this.events[e]=t},
	PeakFinder.PanoramaPanel.prototype.dispatchEvent=function(e,
	t){const n=this.events[e];
null!=n?n.callbacks.forEach((function(e){e(t)})):console.log("event '"+e+"' doesn't exists")};
